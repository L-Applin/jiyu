
#import "LibC";

let NEW_MEM_CHUNK_ELEMENT_COUNT = 16;

typealias array_count_type   = __builtin_array_count_type;

func __array_reserve<T>(array: *[..] T, _amount: int) {
    var amount = _amount;
    if amount <= 0
        amount = NEW_MEM_CHUNK_ELEMENT_COUNT;

    var new_mem = cast(*T) malloc(cast(size_t) amount * sizeof(T));

    if array.data {
        memcpy(cast(*void) new_mem, cast(*void) array.data, cast(size_t) (array.count * sizeof(T)) );
        free(cast(*void) array.data);
    }

    array.data = new_mem;
    array.allocated = amount;
}

func __array_resize<T>(array: *[..] T, _amount: int) {
    array.reserve(_amount);
    array.count = _amount;
}

func __array_add<T>(array: *[..] T, item: T) {
    if (array.count+1 >= array.allocated) array.reserve(cast(int) array.allocated + NEW_MEM_CHUNK_ELEMENT_COUNT);

    array.count += 1;
    (<<array)[array.count-1] = item;
}

func __array_pop<T>(array: *[..] T) -> T {
    var last = array.data[array.count-1];
    array.count -= 1;
    return last;
}

func __array_reset<T>(array: *[..] T) {
    array.count = 0;
    array.allocated = 0;

    if array.data free(cast(*void) array.data);
    array.data = null;
}

func __array_contains<T>(array: *[..] T, item: T) -> bool {
    for <<array {
        if it == item return true;
    }
    return false;
}

func __array_add_if_unique<T>(array: *[..] T, item: T) {
    if array.contains(item) == false array.add(item);
    // if !array.contains(item) array.add(item); // @@ This doesn't work!
}
