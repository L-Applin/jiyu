#import "LibC"; // for sqrtf, cos, sin

let TAU = 6.28318530718;
let DEGREES_TO_RADIANS = TAU / 360.0;

struct Vector3 {
    var x: float;
    var y: float;
    var z: float;

    func make(x: float, y: float, z: float) -> Vector3 {
        var v: Vector3;
        v.x = x;
        v.y = y;
        v.z = z;
        return v;
    }

    func length(this: Vector3) -> float {
        return sqrtf(this.x*this.x + this.y*this.y + this.z*this.z);
    }

    func length_squared(this: Vector3) -> float {
        return this.x*this.x + this.y*this.y + this.z*this.z;
    }

    func cross(a: Vector3, b: Vector3) -> Vector3 {
        var x = a.y*b.z - a.z*b.y;
        var y = a.z*b.x - a.x*b.z;
        var z = a.x*b.y - a.y*b.x;
        return make(x, y, z);
    }

    func dot(a: Vector3, b: Vector3) -> float {
        return a.x*b.x + a.y*b.y + a.z*b.z;
    }

    func sub(a: Vector3, b: Vector3) -> Vector3 {
        return make(a.x - b.x, a.y - b.y, a.z - b.z);
    }

    func add(a: Vector3, b: Vector3) -> Vector3 {
        return make(a.x + b.x, a.y + b.y, a.z + b.z);
    }

    func multiply(a: Vector3, s: float) -> Vector3 {
        return make(a.x*s, a.y*s, a.z*s);
    }

    func project_onto(a: Vector3, b: Vector3) -> Vector3 {
        var scalar = dot(a, b) / b.length_squared();
        return b.multiply(scalar);
    }
}

operator+(a: Vector3, b: Vector3) -> Vector3 {
    return a.add(b);
}

operator-(a: Vector3, b: Vector3) -> Vector3 {
    return a.sub(b);
}

operator*(a: Vector3, s: float) -> Vector3 {
    return a.multiply(s);
}

struct Matrix4 {
    var m: [4][4] float;

    func identity() -> Matrix4 {
        var m: Matrix4;

        m.m[0][0] = 1;
        m.m[1][1] = 1;
        m.m[2][2] = 1;
        m.m[3][3] = 1;

        return m;
    }

    func ortho(left: float, right: float, bottom: float, top: float, near: float, far: float) -> Matrix4 {
        var mat: Matrix4 = identity();
        mat.m[0][0] = 2.0 / (right - left);
        mat.m[1][1] = 2.0 / (top - bottom);
        mat.m[2][2] = -2.0 / (far - near);

        mat.m[0][3] = -(right + left) / (right - left);
        mat.m[1][3] = -(top + bottom) / (top - bottom);
        mat.m[2][3] = -(far + near) / (far - near);
        return mat;
    }

    func frustum(left: float, right: float, bottom: float, top: float, _near: float, _far: float) -> Matrix4 {
        var mat: Matrix4 = identity();

        var A = (right + left) / (right - left);
        var B = (top + bottom) / (top - bottom);
        var C = - (_far + _near) / (_far - _near);
        var D = - (2 * _far * _near) / (_far - _near);

        mat.m[0][0] = 2 * _near / (right - left);
        mat.m[0][2] = A;

        mat.m[1][1] = 2 * _near / (top - bottom);
        mat.m[1][2] = B;

        mat.m[2][2] = C;
        mat.m[2][3] = D;

        mat.m[3][2] = -1;
        mat.m[3][3] =  0;
        return mat;
    }

    func perspective(fov: float, aspect: float, near: float, far: float) -> Matrix4 {
        var t = cast(float) tan(DEGREES_TO_RADIANS * fov / 2.0) * near;
        var b = -t;
        var l = aspect * b;
        var r = aspect * t;
        return frustum(l, r, b, t, near, far);
    }

    func translate(v: Vector3) -> Matrix4 {
        var mat: Matrix4 = identity();

        mat.m[0][3] = v.x;
        mat.m[1][3] = v.y;
        mat.m[2][3] = v.z;

        return mat;
    }

    func rotate(v: Vector3, theta: float) -> Matrix4 {
        var c = cosf(theta);
        var s = sinf(theta);
        var omc = 1.0 - c;

        var x = v.x * omc;
        var y = v.y * omc;
        var z = v.z * omc;

        var vxvy = x * v.y;
        var vxvz = x * v.z;
        var vyvz = y * v.z;

        var result: Matrix4;
        result.set_column(0, Vector3.make(   c + x*v.x, vxvy - s*v.z, vxvz + s*v.y), 0);
        result.set_column(1, Vector3.make(vxvy + s*v.z,    c + y*v.y, vyvz - s*v.x), 0);
        result.set_column(2, Vector3.make(vxvz - s*v.y, vyvz + s*v.x,    c + z*v.z), 0);
        result.m[3][3] = 1;
        return result;
    }

    func scale(v: Vector3) -> Matrix4 {
        var result: Matrix4;
        result.m[0][0] = v.x;
        result.m[1][1] = v.y;
        result.m[2][2] = v.z;
        return result;
    }

    func scale(a: float) -> Matrix4 {
        return scale(Vector3.make(a, a, a));
    }

    func multiply(left: Matrix4, right: Matrix4) -> Matrix4 {
        var result: Matrix4;

        var mat = right;
        var m   = left.m;

        result.m[0][0] = m[0][0] * mat.m[0][0] + m[0][1] * mat.m[1][0] + m[0][2] * mat.m[2][0] + m[0][3] * mat.m[3][0];
        result.m[0][1] = m[0][0] * mat.m[0][1] + m[0][1] * mat.m[1][1] + m[0][2] * mat.m[2][1] + m[0][3] * mat.m[3][1];
        result.m[0][2] = m[0][0] * mat.m[0][2] + m[0][1] * mat.m[1][2] + m[0][2] * mat.m[2][2] + m[0][3] * mat.m[3][2];
        result.m[0][3] = m[0][0] * mat.m[0][3] + m[0][1] * mat.m[1][3] + m[0][2] * mat.m[2][3] + m[0][3] * mat.m[3][3];

        result.m[1][0] = m[1][0] * mat.m[0][0] + m[1][1] * mat.m[1][0] + m[1][2] * mat.m[2][0] + m[1][3] * mat.m[3][0];
        result.m[1][1] = m[1][0] * mat.m[0][1] + m[1][1] * mat.m[1][1] + m[1][2] * mat.m[2][1] + m[1][3] * mat.m[3][1];
        result.m[1][2] = m[1][0] * mat.m[0][2] + m[1][1] * mat.m[1][2] + m[1][2] * mat.m[2][2] + m[1][3] * mat.m[3][2];
        result.m[1][3] = m[1][0] * mat.m[0][3] + m[1][1] * mat.m[1][3] + m[1][2] * mat.m[2][3] + m[1][3] * mat.m[3][3];

        result.m[2][0] = m[2][0] * mat.m[0][0] + m[2][1] * mat.m[1][0] + m[2][2] * mat.m[2][0] + m[2][3] * mat.m[3][0];
        result.m[2][1] = m[2][0] * mat.m[0][1] + m[2][1] * mat.m[1][1] + m[2][2] * mat.m[2][1] + m[2][3] * mat.m[3][1];
        result.m[2][2] = m[2][0] * mat.m[0][2] + m[2][1] * mat.m[1][2] + m[2][2] * mat.m[2][2] + m[2][3] * mat.m[3][2];
        result.m[2][3] = m[2][0] * mat.m[0][3] + m[2][1] * mat.m[1][3] + m[2][2] * mat.m[2][3] + m[2][3] * mat.m[3][3];

        result.m[3][0] = m[3][0] * mat.m[0][0] + m[3][1] * mat.m[1][0] + m[3][2] * mat.m[2][0] + m[3][3] * mat.m[3][0];
        result.m[3][1] = m[3][0] * mat.m[0][1] + m[3][1] * mat.m[1][1] + m[3][2] * mat.m[2][1] + m[3][3] * mat.m[3][1];
        result.m[3][2] = m[3][0] * mat.m[0][2] + m[3][1] * mat.m[1][2] + m[3][2] * mat.m[2][2] + m[3][3] * mat.m[3][2];
        result.m[3][3] = m[3][0] * mat.m[0][3] + m[3][1] * mat.m[1][3] + m[3][2] * mat.m[2][3] + m[3][3] * mat.m[3][3];

        return result;
    }

    func inverse(mat: Matrix4) -> Matrix4 {
        var a = <<cast(*Vector3) *mat.m[0];
        var b = <<cast(*Vector3) *mat.m[1];
        var c = <<cast(*Vector3) *mat.m[2];
        var d = <<cast(*Vector3) *mat.m[3];

        var x = mat.m[0][3];
        var y = mat.m[1][3];
        var z = mat.m[2][3];
        var w = mat.m[3][3];

        var s = Vector3.cross(a, b);
        var t = Vector3.cross(c, d);
        var u = Vector3.sub(a.multiply(y), b.multiply(x));
        var v = Vector3.sub(c.multiply(w), d.multiply(z));

        var inv_det = 1.0 / (s.dot(v) + t.dot(u));
        s = s.multiply(inv_det);
        t = t.multiply(inv_det);
        u = u.multiply(inv_det);
        v = v.multiply(inv_det);

        var r0 = Vector3.add(b.cross(v), t.multiply(y));
        var r1 = Vector3.sub(v.cross(a), t.multiply(x));
        var r2 = Vector3.add(d.cross(u), s.multiply(w));
        var r3 = Vector3.sub(u.cross(c), s.multiply(z));

        var result: Matrix4;
        result.set_column(0, r0, -b.dot(t));
        result.set_column(1, r1,  a.dot(t));
        result.set_column(2, r2, -d.dot(s));
        result.set_column(3, r3,  c.dot(s));
        return result;
    }

    // utility to avoid making a function taking a bunch of floats for inverse()
    func set_row(mat: Matrix4, index: int, v: Vector3, w: float) {
        mat.m[index][0] = v.x;
        mat.m[index][1] = v.y;
        mat.m[index][2] = v.z;
        mat.m[index][3] = w;
    }

    func set_column(mat: Matrix4, index: int, v: Vector3, w: float) {
        mat.m[0][index] = v.x;
        mat.m[1][index] = v.y;
        mat.m[2][index] = v.z;
        mat.m[3][index] = w;
    }

    func transpose(mat: Matrix4) -> Matrix4 {
        var result: Matrix4;

        for 0..3 {
            var x = it;
            for 0..3 {
                var y = it;
                result.m[x][y] = mat.m[y][x];
            }
        }

        return result;
    }


    func determinate (mat: Matrix4) -> float {
        return
            mat.m[0][3] * mat.m[1][2] * mat.m[2][1] * mat.m[3][0] - mat.m[0][2] * mat.m[1][3] * mat.m[2][1] * mat.m[3][0] -
            mat.m[0][3] * mat.m[1][1] * mat.m[2][2] * mat.m[3][0] + mat.m[0][1] * mat.m[1][3] * mat.m[2][2] * mat.m[3][0] +
            mat.m[0][2] * mat.m[1][1] * mat.m[2][3] * mat.m[3][0] - mat.m[0][1] * mat.m[1][2] * mat.m[2][3] * mat.m[3][0] -
            mat.m[0][3] * mat.m[1][2] * mat.m[2][0] * mat.m[3][1] + mat.m[0][2] * mat.m[1][3] * mat.m[2][0] * mat.m[3][1] +
            mat.m[0][3] * mat.m[1][0] * mat.m[2][2] * mat.m[3][1] - mat.m[0][0] * mat.m[1][3] * mat.m[2][2] * mat.m[3][1] -
            mat.m[0][2] * mat.m[1][0] * mat.m[2][3] * mat.m[3][1] + mat.m[0][0] * mat.m[1][2] * mat.m[2][3] * mat.m[3][1] +
            mat.m[0][3] * mat.m[1][1] * mat.m[2][0] * mat.m[3][2] - mat.m[0][1] * mat.m[1][3] * mat.m[2][0] * mat.m[3][2] -
            mat.m[0][3] * mat.m[1][0] * mat.m[2][1] * mat.m[3][2] + mat.m[0][0] * mat.m[1][3] * mat.m[2][1] * mat.m[3][2] +
            mat.m[0][1] * mat.m[1][0] * mat.m[2][3] * mat.m[3][2] - mat.m[0][0] * mat.m[1][1] * mat.m[2][3] * mat.m[3][2] -
            mat.m[0][2] * mat.m[1][1] * mat.m[2][0] * mat.m[3][3] + mat.m[0][1] * mat.m[1][2] * mat.m[2][0] * mat.m[3][3] +
            mat.m[0][2] * mat.m[1][0] * mat.m[2][1] * mat.m[3][3] - mat.m[0][0] * mat.m[1][2] * mat.m[2][1] * mat.m[3][3] -
            mat.m[0][1] * mat.m[1][0] * mat.m[2][2] * mat.m[3][3] + mat.m[0][0] * mat.m[1][1] * mat.m[2][2] * mat.m[3][3];
    }
}

operator*(a: Matrix4, b: Matrix4) -> Matrix4 {
    return Matrix4.multiply(a, b);
}

