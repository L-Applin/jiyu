
// C library
func @c_function printf(fmt: *uint8, temporary_c_vararg);

// GLFW
func @c_function glfwInit();
func @c_function glfwCreateWindow(width: int32, height: int32, title: *uint8, unk: int64, unk1: int64) -> *void;
func @c_function glfwTerminate();
func @c_function glfwMakeContextCurrent(window: *void);
func @c_function glfwWindowShouldClose(window: *void) -> bool;
func @c_function glfwSwapBuffers(window: *void);
func @c_function glfwPollEvents();

// OpenGL
typealias GLenum     = uint32;
typealias GLboolean  = uint8;
typealias GLbitfield = uint32;
typealias GLbyte     = int8;
typealias GLshort    = int16;
typealias GLint      = int32;
typealias GLsizei    = int32;
typealias GLubyte    = uint8;
typealias GLushort   = uint16;
typealias GLuint     = uint32;
typealias GLfloat    = float;
typealias GLclampf   = float;
typealias GLdouble   = double;
typealias GLclampd   = double;
typealias GLvoid     = void;

let GL_COLOR_BUFFER_BIT: GLbitfield = 16384;

func @c_function glClearColor(r: GLclampf, g: GLclampf, b: GLclampf, a: GLclampf);
func @c_function glClear(bits: GLbitfield);

func c_style_strlen(input: c_string) -> int64 {
	var cursor = input;
	while <<cursor != 0 {
		cursor = cursor + 1;
	}

	return cast(int64) (cursor - input);
}

typealias c_string = *uint8;

func to_string(input: c_string) -> string {
	var s: string;
	s.data   = input;
	s.length = c_style_strlen(input);
	return s;
}

func main() {
	var window: *void;

	glfwInit();

	window = glfwCreateWindow(640, 480, "Hello, Sailor!".data, 0, 0);
	
	printf("String length: %d\n".data, c_style_strlen("Hello".data));

	glfwMakeContextCurrent(window);

	while glfwWindowShouldClose(window) == false {
		glClearColor(0, 1, 0, 1);
		glClear(GL_COLOR_BUFFER_BIT);

		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glfwTerminate();
}
