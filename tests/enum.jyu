
//#import "LibC";
//#import "Basic";

/*
struct Days {
    let Monday = 0;
}
var monday : Days = Days.Monday;
*/


enum Days : uint {
    Monday;
    Tuesday = cast(Days)(Monday + 1);   // + should give a type error -> Days, literal?
    
    Wednesday = cast(Days)2;            // This cast should not be necessary!

    Thursday;
    Friday = cast(Days)(Thursday + 1);

    Saturday;
    Sunday;
}

/*


//var monday = Days.Monday;
//var tuesday : Days = Days.Tuesday;
//var my_day : Days;

//let MONDAY = 0;
//let TUESDAY = MONDAY + 1;

func test(day : Days) -> int {
    return cast(int)day + 1;
}


func main() {

    // These require explicit casts.
    //var f : float = 1;
    //var i : int = 1.0;

    // These do not:
    var f : float = cast(float) 1;
    var i : int = cast(int) 1.0;

    {
        var day : Days;

        let Monday = Days.Monday;
        let Tuesday = Monday + 1;
        printf("typeof(Monday) = %d\n", typeof(Monday));
        printf("typeof(Days.Monday) = %d\n", typeof(Days.Monday));
        printf("Days = %d\n", Days);
        printf("typeof(Days) = %d\n", typeof(Days));
        assert(typeof(Monday) == Days);      // Type instantiations need to be folded to literals.

        let MONDAY = cast(int)Days.Monday;   // Type of MONDAY is int
        assert(typeof(MONDAY) == int);
    }

    {
        var day = Days.Monday;
        assert(typeof(day) == Days);

        //day = day + 1;            // This correctly fails.
        //day = Days.Monday + 1;    // Here the assignment fails, but not the +!




        var day_index = cast(int)Days.Monday;   // Type of dayIndex is int
        assert(typeof(day_index) == int);
    }

    var monday = Days.Monday;

    //test(Days.Monday + 1);
    //printf("MONDAY = %d\n", MONDAY);
    //printf("TUESDAY = %d\n", TUESDAY);
  
    printf("Monday = %d\n", Days.Monday);
    printf("Tuesday = %d\n", Days.Tuesday);
    printf("Wednesday = %d\n", Days.Wednesday);
    printf("Thursday = %d\n", Days.Thursday);
    printf("Friday = %d\n", Days.Friday);
    printf("Saturday = %d\n", Days.Saturday);
    printf("Sunday = %d\n", Days.Sunday);

    //printf("Monday+1 = %d\n", test(Days.Monday));

    //printf("Whatever = %d\n", Days.Whatever); // This should trigger an error.
}

*/

/*
enum Days : uint8 {
    Monday = 0;
//    Tuesday = Monday + 1;
//    Wednesday;
//    Thursday;
//    Friday;
//    Saturday;
//    Sunday;
}
*/

/*

enum Days : uint8 {
    Monday = 0;
    Tuesday = 1;
    Wednesday;
    Thursday;
    Friday;
    Saturday;
    Sunday;
}

enum Days : uint8 {
    Monday = 0,
    Tuesday = 1,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday,
}
enum Bool : uint8 { False, True }

*/
