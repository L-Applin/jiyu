#import "LibC";

func test() -> (a: int, b: float) {
    // arguments in tuple-expressions are automatically inferred
    // according to the fields of the tuple being assigned, returned, or passed to.
    return (1, 4);
}

func test2(a: (a: int, b: float)) {
    printf("T2: %d\n", a.a);
    printf("T2: %f\n", a.b);
}

func main() {
    var t = test();

    printf("%d\n", t.a);
    printf("%f\n", t.b);

    t = (2, 4);

    printf("%d\n", t.a);
    printf("%f\n", t.b);

    test2(t);
    test2((6, 9));

    var n: int;
    var m: float;

    // In the event that a tuple-expression is on the left-hand-side
    // of an assignment, the type of the tuple is directly determined by
    // the types of its arguments, regardless of the type of the tuple
    // on the right-hand-side.
    // Each field of the tuple on the right-hand-side is unpacked into
    // the individual arguments of the tuple-expression on the left-hand-
    // side.
    (n, m) = test();

    // Like other types of assignments, you cannot try to use a literal
    // in a tuple expression on the left-hand-side of an assignment.
    // (n, 1) = test(); // does not work.

    printf("n: %d\n", n);
    printf("m: %f\n", m);

    // Not working yet.
    /*
    var (i, j) = test();
    var (i: int, j: float) = test();
    */
}
