
// @TODO should we do replacements at the scope level?

error when we use an identifier before it's declared withing function scope

================


/*
    Cool idea: we have a block construct like Swift has autorelease blocks, except you can use it for any data structure
    and the data structure implements a constructor and destructor

    MyCoolStruct :: struct {
        func construct() {
            // do stuff at begining of block
        }

        func destruct() {
            // do stuff at end of block
        }
    }

    @MyCoolStruct {
        // construct here

        // ...
        
        // destruct here
    }

    // This would be syntactic sugar for declaring the struct within a block

    {
        my_pool: Pool; // construct then destruct at end of block

        // do stuff ...

        // destruct here
    }

    // Update 6 February 2020, after some discussion on the Handmade Network Discord,
    // it seems like this would be a preferrable implementation of this feature:

    // As long as the struct implements begin_block, end_block it is valid to use
    // Additionally, as long as there are no vars declared in Profile, this is technically stateless
    struct Profile {
        func begin_block(this: *Profile) {}
        func end_block(this: *Profile) {}
    }

    @Profile {
        // Profile.begin_block(...); runs here

        // ....

        // Profile.end_block(...); runs here
    }

    // This way construction/destruction semantics of a type does not conflate with block encapsulation semantics.
*/



===============